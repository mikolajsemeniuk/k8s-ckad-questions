apiVersion: v1
kind: Pod
metadata:
  name: my-multi-container-pod # Name of the Pod
  namespace: default # Namespace where the Pod will be created
  labels:
    app: myapp # Labels to identify the Pod
    tier: backend # Additional label for categorizing the Pod
  annotations:
    description: "This is a sample pod with multiple containers, volume mounts, and advanced configurations." # Annotations provide metadata that can be used by external tools

spec:
  restartPolicy: Always # Restart policy for the Pod (Always, OnFailure, Never)
  hostNetwork: false # Whether to use the host's network namespace
  dnsPolicy: Default # DNS policy for the Pod
  serviceAccountName: my-service-account # Service account to be used
  priorityClassName: high-priority # Priority class for the Pod
  schedulerName: default-scheduler # Scheduler to be used

  containers:
    - name: ubuntu-container # Name of the container
      image: ubuntu # Container image
      command: ["/bin/sh"] # Command to run in the container
      args: ["-c", "echo Hello Kubernetes! && sleep 3600"] # Arguments for the command
      ports:
        - containerPort: 8080 # Port exposed by the container
          hostPort: 8080
      env:
        - name: ENV_VAR_1
          value: "value1" # Static environment variable
        - name: ENV_VAR_2
          valueFrom:
            configMapKeyRef:
              name: myconfigmap # Reference to a Kubernetes ConfigMap
              key: config_key
        - name: ENV_VAR_3
          valueFrom:
            secretKeyRef:
              name: mysecret # Reference to a Kubernetes secret
              key: password # Key within the secret
      envFrom:
        - configMapRef:
            name: my-config-map # References a ConfigMap for environment variables
        - secretRef:
            name: mysecret
      resources:
        requests:
          memory: "64Mi" # Memory request
          cpu: "250m" # CPU request
        limits:
          memory: "128Mi" # Memory limit
          cpu: "500m" # CPU limit
      volumeMounts:
        - name: config-volume
          mountPath: /etc/config # Mounts the volume at /etc/config
      livenessProbe:
        httpGet:
          path: /healthz # Path to check for liveness
          port: 8080
        initialDelaySeconds: 3 # Delay before starting probes
        periodSeconds: 3 # Probe interval
        # tcpSocket:
        #   port: 3306
      readinessProbe:
        exec:
          command: ["cat", "tmp"]
        initialDelaySeconds: 5
        periodSeconds: 10
        failureThreshold: 1

    - name: nginx-container # Second container in the Pod
      image: nginx # Container image
      ports:
        - containerPort: 80 # Port exposed by the container
      volumeMounts:
        - name: html
          mountPath: /usr/share/nginx/html # Mounts the volume at /usr/share/nginx/html

  initContainers:
    - name: init-myservice
      image: busybox
      command: [
          "sh",
          "-c",
          "until nslookup myservice; do echo waiting for myservice; sleep 2; done;",
        ] # Command to run in the init container

  volumes:
    - name: config-volume
      configMap:
        name: my-config-map # ConfigMap to be used as a volume
    - name: html
      emptyDir: {} # EmptyDir volume that is created empty when the Pod is assigned to a node

  imagePullSecrets:
    - name: myregistrykey # Secret for pulling images from a private registry

  securityContext:
    runAsUser: 1000 # Run containers as this user
    fsGroup: 2000 # File system group for the Pod
    # only supported on container level and not pod
    # capabilities:
    # add: ["MAC_ADMIN"]

  # kubectl label node [NODE_NAME] [LABEL_KEY]=[LABEL_VALUE]
  nodeSelector:
    size: Large

  # kubectl taint node [NODE_NAME] [KEY]=[VALUE]:[EFFECT]
  tolerations:
    - key: key1
      operator: Equal
      value: value1
      effect: NoSchedule # Prevents new pods from being scheduled on the node. Existing pods remain unaffected.
    - key: key2
      operator: Exists
      effect: NoExecute # Prevents new pods from being scheduled on the node and evicts existing pods that do not tolerate the taint.
      tolerationSeconds: 3600 # Toleration with a time limit
    - key: key3
      operator: Exists
      effect: PreferNoSchedule

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        # The scheduler will only place the pod on nodes that meet the specified criteria
        nodeSelectorTerms:
          # This rule specifies that the pod must be scheduled on nodes labeled with kubernetes.io/e2e-az-name and the value must be either e2e-az1 or e2e-az2.
          - matchExpressions:
              - key: kubernetes.io/e2e-az-name
                operator: In # NotIn Exists DoesNotExist Gt Lt
                values:
                  - e2e-az1 # Node must be in either e2e-az1
                  - e2e-az2 # or e2e-az2
      # This rule is a preference, not a requirement. The scheduler will try to place the pod on nodes that meet the criteria, but it will still schedule the pod even if no such nodes are available
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1 # Weight for preferred node selection
          preference:
            matchExpressions:
              - key: another-node-label-key
                operator: In
                values:
                  - another-node-label-value

    # podAntiAffinity:
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - topologyKey: "kubernetes.io/hostname" # Must be co-located (on the same node)
          labelSelector:
            matchExpressions:
              - key: security
                operator: In
                values:
                  - S1 # Pods with the label key `security` and value `S1`
